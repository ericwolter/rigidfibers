a_matrix = 0.0
b_vector = 0.0

!$OMP PARALLEL DO DEFAULT(PRIVATE) SHARED(quadrature_points, quadrature_weights, legendre_polynomials, lambda, eigen, current_positions, current_orientations, external_force, c, d, e, cc, D1, a_matrix, b_vector)
DO i = 0, NUMBER_OF_FIBERS-1

  position_i = current_positions(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS)
  orientation_i = current_orientations(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS)

  DO j = 0, NUMBER_OF_FIBERS-1

    IF (i==j) THEN

      DO force_index = 0, NUMBER_OF_TERMS_IN_FORCE_EXPANSION-1
        a_matrix( &
          i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index + 1, &
          j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index * DIMENSIONS + 1) = &
            1.0
        a_matrix( &
          i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index + 2, &
          j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index * DIMENSIONS + 2) = &
            1.0
        a_matrix( &
          i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index + 3, &
          j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index * DIMENSIONS + 3) = &
            1.0

        !PRINT *, i, j, i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index + 1, j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index * DIMENSIONS + 1
      END DO

    ELSE

      position_j = current_positions(j*DIMENSIONS + 1:j*DIMENSIONS + DIMENSIONS)
      orientation_j = current_orientations(j*DIMENSIONS + 1:j*DIMENSIONS + DIMENSIONS)

      DO force_index_j = 0, NUMBER_OF_TERMS_IN_FORCE_EXPANSION-1

#if defined(NUMERICAL)
#include "compute_inner_integral_numerically.incl"
#elif defined(ANALYTICAL)
#include "compute_inner_integral_analytically.incl"
#endif

        force_index_i = 0
        T = 0.0
        TF = 0.0

        DO quadrature_index_i = 0, TOTAL_NUMBER_OF_QUADRATURE_POINTS-1
          quadrature_weight = quadrature_weights(quadrature_index_i+1)
          legendre_polynomial = legendre_polynomials(quadrature_index_i+1, 0 + 1)

          PLUS_EQUALS(T,quadrature_weight * G(quadrature_index_i+1,:) * legendre_polynomial)

          IF (force_index_j == 0) THEN
            PLUS_EQUALS(TF, quadrature_weight * GF(quadrature_index_i+1,:) * legendre_polynomial)
          END IF
        END DO

        Q(1) = T(1) * orientation_i(1) + T(4) * orientation_i(2) + T(5) * orientation_i(3)
        Q(2) = T(4) * orientation_i(1) + T(2) * orientation_i(2) + T(6) * orientation_i(3)
        Q(3) = T(5) * orientation_i(1) + T(6) * orientation_i(2) + T(3) * orientation_i(3)

        x_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 1
        y_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 2
        z_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 3

        x_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 1
        y_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 2
        z_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 3

        a_matrix(x_row_index, x_col_index) = D1 * orientation_i(1) * Q(1);
        a_matrix(x_row_index, y_col_index) = D1 * orientation_i(1) * Q(2);
        a_matrix(x_row_index, z_col_index) = D1 * orientation_i(1) * Q(3);
        a_matrix(y_row_index, x_col_index) = D1 * orientation_i(2) * Q(1);
        a_matrix(y_row_index, y_col_index) = D1 * orientation_i(2) * Q(2);
        a_matrix(y_row_index, z_col_index) = D1 * orientation_i(2) * Q(3);
        a_matrix(z_row_index, x_col_index) = D1 * orientation_i(3) * Q(1);
        a_matrix(z_row_index, y_col_index) = D1 * orientation_i(3) * Q(2);
        a_matrix(z_row_index, z_col_index) = D1 * orientation_i(3) * Q(3);

        ! PRINT *, i, j, x_row_index, x_col_index
        ! PRINT *, i, j, x_row_index, y_col_index
        ! PRINT *, i, j, x_row_index, z_col_index
        ! PRINT *, i, j, y_row_index, x_col_index
        ! PRINT *, i, j, y_row_index, y_col_index
        ! PRINT *, i, j, y_row_index, z_col_index
        ! PRINT *, i, j, z_row_index, x_col_index
        ! PRINT *, i, j, z_row_index, y_col_index
        ! PRINT *, i, j, z_row_index, z_col_index

        IF (force_index_j == 0) THEN
          QF = TF(1) * orientation_i(1) + TF(2) * orientation_i(2) + TF(3) * orientation_i(3)

          MINUS_EQUALS(b_vector(x_row_index), D1 * orientation_i(1) * QF)
          MINUS_EQUALS(b_vector(y_row_index), D1 * orientation_i(2) * QF)
          MINUS_EQUALS(b_vector(z_row_index), D1 * orientation_i(3) * QF)

        END IF

        DO force_index_i = 1, NUMBER_OF_TERMS_IN_FORCE_EXPANSION-1
          gamma = 0.5 * (2.0 * (force_index_i + 1) + 1.0) / (d + e - cc * lambda(force_index_i+1));

          T = 0.0
          TF = 0.0

          DO quadrature_index_i = 0, TOTAL_NUMBER_OF_QUADRATURE_POINTS-1
            quadrature_weight = quadrature_weights(quadrature_index_i+1)
            legendre_polynomial = legendre_polynomials(quadrature_index_i+1, force_index_i + 1)

            PLUS_EQUALS(T,quadrature_weight * G(quadrature_index_i+1,:) * legendre_polynomial)

            IF (force_index_j == 0) THEN
              PLUS_EQUALS(TF, quadrature_weight * GF(quadrature_index_i+1,:) * legendre_polynomial)
            END IF
          END DO

          Q(1) = T(1) * orientation_i(1) + T(4) * orientation_i(2) + T(5) * orientation_i(3)
          Q(2) = T(4) * orientation_i(1) + T(2) * orientation_i(2) + T(6) * orientation_i(3)
          Q(3) = T(5) * orientation_i(1) + T(6) * orientation_i(2) + T(3) * orientation_i(3)

          x_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 1
          y_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 2
          z_row_index = i * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_i + 3

          x_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 1
          y_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 2
          z_col_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + force_index_j * DIMENSIONS + 3

          a_matrix(x_row_index,x_col_index) = gamma * (T(1) - eigen(force_index_i+1) * orientation_i(1) * Q(1));
          a_matrix(x_row_index,y_col_index) = gamma * (T(4) - eigen(force_index_i+1) * orientation_i(1) * Q(2));
          a_matrix(x_row_index,z_col_index) = gamma * (T(5) - eigen(force_index_i+1) * orientation_i(1) * Q(3));
          a_matrix(y_row_index,x_col_index) = gamma * (T(4) - eigen(force_index_i+1) * orientation_i(2) * Q(1));
          a_matrix(y_row_index,y_col_index) = gamma * (T(2) - eigen(force_index_i+1) * orientation_i(2) * Q(2));
          a_matrix(y_row_index,z_col_index) = gamma * (T(6) - eigen(force_index_i+1) * orientation_i(2) * Q(3));
          a_matrix(z_row_index,x_col_index) = gamma * (T(5) - eigen(force_index_i+1) * orientation_i(3) * Q(1));
          a_matrix(z_row_index,y_col_index) = gamma * (T(6) - eigen(force_index_i+1) * orientation_i(3) * Q(2));
          a_matrix(z_row_index,z_col_index) = gamma * (T(3) - eigen(force_index_i+1) * orientation_i(3) * Q(3));

          ! PRINT *, i, j, x_row_index, x_col_index
          ! PRINT *, i, j, x_row_index, y_col_index
          ! PRINT *, i, j, x_row_index, z_col_index
          ! PRINT *, i, j, y_row_index, x_col_index
          ! PRINT *, i, j, y_row_index, y_col_index
          ! PRINT *, i, j, y_row_index, z_col_index
          ! PRINT *, i, j, z_row_index, x_col_index
          ! PRINT *, i, j, z_row_index, y_col_index
          ! PRINT *, i, j, z_row_index, z_col_index

          IF (force_index_j == 0) THEN
            QF = TF(1) * orientation_i(1) + TF(2) * orientation_i(2) + TF(3) * orientation_i(3)

            MINUS_EQUALS(b_vector(x_row_index), gamma * (TF(1) - eigen(force_index_i+1) * orientation_i(1) * QF))
            MINUS_EQUALS(b_vector(y_row_index), gamma * (TF(2) - eigen(force_index_i+1) * orientation_i(2) * QF))
            MINUS_EQUALS(b_vector(z_row_index), gamma * (TF(3) - eigen(force_index_i+1) * orientation_i(3) * QF))
          END IF
        END DO
      END DO
    END IF
  END DO
END DO
!$OMP END PARALLEL DO
