!$OMP PARALLEL DO DEFAULT(PRIVATE) SHARED(quadrature_points, quadrature_weights, legendre_polynomials, lambda, eigen, current_positions, current_orientations, current_translational_velocities, current_rotational_velocities, b_vector, external_force, c, d, e, cc, D1)
DO i = 0, NUMBER_OF_FIBERS-1

  position_i = current_positions(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS)
  orientation_i = current_orientations(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS)

  oriented_force = sum(orientation_i * (2.0 * external_force)) * orientation_i;
  current_translational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS) = (d + 2.0) * 2.0 * external_force + (d - 2.0) * oriented_force
  current_rotational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS) = 0.0

  DO j = 0, NUMBER_OF_FIBERS-1

    IF (i /= j) THEN

      position_j = current_positions(j*DIMENSIONS + 1:j*DIMENSIONS + DIMENSIONS)
      orientation_j = current_orientations(j*DIMENSIONS + 1:j*DIMENSIONS + DIMENSIONS)

      DO quadrature_index_i = 0, TOTAL_NUMBER_OF_QUADRATURE_POINTS-1

        GF(quadrature_index_i+1,:) = 0.0

        position_on_fiber_i = position_i + quadrature_points(quadrature_index_i+1) * orientation_i

        DO quadrature_index_j = 0, TOTAL_NUMBER_OF_QUADRATURE_POINTS-1
          position_on_fiber_j = position_j + quadrature_points(quadrature_index_j+1) * orientation_j

          difference = position_on_fiber_i - position_on_fiber_j
          difference2 = difference**2

          invDistance = 1.0/SQRT(difference2(1)+difference2(2)+difference2(3))
          invDistance3 = invDistance * invDistance * invDistance
          invDistance5 = invDistance3 * invDistance * invDistance

          K(1) = invDistance + invDistance3 * difference2(1) + 2.0 * SLENDERNESS * SLENDERNESS * (invDistance3 - 3.0 * invDistance5 * difference2(1))
          K(2) = invDistance + invDistance3 * difference2(2) + 2.0 * SLENDERNESS * SLENDERNESS * (invDistance3 - 3.0 * invDistance5 * difference2(2))
          K(3) = invDistance + invDistance3 * difference2(3) + 2.0 * SLENDERNESS * SLENDERNESS * (invDistance3 - 3.0 * invDistance5 * difference2(3))
          K(4) = invDistance3 * difference(1) * difference(2) + 2.0 * SLENDERNESS * SLENDERNESS * (-3.0) * invDistance5 * difference(1) * difference(2)
          K(5) = invDistance3 * difference(1) * difference(3) + 2.0 * SLENDERNESS * SLENDERNESS * (-3.0) * invDistance5 * difference(1) * difference(3)
          K(6) = invDistance3 * difference(2) * difference(3) + 2.0 * SLENDERNESS * SLENDERNESS * (-3.0) * invDistance5 * difference(2) * difference(3)

          force_on_fiber_j = external_force

          DO force_index_j = 0, NUMBER_OF_TERMS_IN_FORCE_EXPANSION-1
            legendre_polynomial = legendre_polynomials(quadrature_index_j+1, force_index_j+1)

            x_row_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_j + 1
            y_row_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_j + 2
            z_row_index = j * NUMBER_OF_TERMS_IN_FORCE_EXPANSION * DIMENSIONS + DIMENSIONS * force_index_j + 3

            PLUS_EQUALS(force_on_fiber_j(1), b_vector(x_row_index) * legendre_polynomial)
            PLUS_EQUALS(force_on_fiber_j(2), b_vector(y_row_index) * legendre_polynomial)
            PLUS_EQUALS(force_on_fiber_j(3), b_vector(z_row_index) * legendre_polynomial)
          END DO

          quadrature_weight = quadrature_weights(quadrature_index_j+1)

          PLUS_EQUALS(GF(quadrature_index_i+1,1), quadrature_weight * (K(1) * force_on_fiber_j(1) + K(4) * force_on_fiber_j(2) + K(5) * force_on_fiber_j(3)))
          PLUS_EQUALS(GF(quadrature_index_i+1,2), quadrature_weight * (K(4) * force_on_fiber_j(1) + K(2) * force_on_fiber_j(2) + K(6) * force_on_fiber_j(3)))
          PLUS_EQUALS(GF(quadrature_index_i+1,3), quadrature_weight * (K(5) * force_on_fiber_j(1) + K(6) * force_on_fiber_j(2) + K(3) * force_on_fiber_j(3)))
        END DO

      END DO

      TFA0 = 0.0
      TFA1 = 0.0

      DO quadrature_index_i = 0, TOTAL_NUMBER_OF_QUADRATURE_POINTS-1
        quadrature_weight = quadrature_weights(quadrature_index_i+1)
        legendre_polynomial = legendre_polynomials(quadrature_index_i+1, 0 + 1)

        PLUS_EQUALS(TFA0, quadrature_weight * GF(quadrature_index_i+1,:))
        PLUS_EQUALS(TFA1, quadrature_weight * GF(quadrature_index_i+1,:) * legendre_polynomial)
      END DO

      PLUS_EQUALS(current_translational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS), TFA0)

      TFA1_TMP = TFA1 * orientation_i

      PLUS_EQUALS(current_rotational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS), TFA1 - (orientation_i * TFA1_TMP(1) + orientation_i * TFA1_TMP(2) + orientation_i * TFA1_TMP(3)))

    END IF

  END DO

  MULTIPLY_EQUALS(current_translational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS), (0.5 / d))
  MULTIPLY_EQUALS(current_rotational_velocities(i*DIMENSIONS + 1:i*DIMENSIONS + DIMENSIONS), (1.5 / d))

END DO
!$OMP END PARALLEL DO
